"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const utils_1 = require("../../utils");
exports.rootFieldUsed = ({ name: serviceName, typeDefs, }) => {
    const errors = [];
    const defaultRootOperationNameLookup = {
        query: 'Query',
        mutation: 'Mutation',
        subscription: 'Subscription',
    };
    const defaultRootOperationNames = Object.values(defaultRootOperationNameLookup);
    const rootOperationTypeMap = Object.create(null);
    let hasSchemaDefinitionOrExtension = false;
    graphql_1.visit(typeDefs, {
        OperationTypeDefinition(node) {
            hasSchemaDefinitionOrExtension = true;
            rootOperationTypeMap[node.type.name.value] =
                defaultRootOperationNameLookup[node.operation];
        },
    });
    if (hasSchemaDefinitionOrExtension) {
        graphql_1.visit(typeDefs, {
            ObjectTypeDefinition(node) {
                if (defaultRootOperationNames.includes(node.name.value)) {
                    errors.push(utils_1.errorWithCode(`ROOT_${node.name.value}_USED`, utils_1.logServiceAndType(serviceName, node.name.value) +
                        `Found invalid use of default root operation type \`${node.name.value}\`. Default root operation type names (${defaultRootOperationNames.join(', ')}) are disallowed when a schema is defined or extended within a service.`));
                }
            },
            ObjectTypeExtension(node) {
                if (defaultRootOperationNames.includes(node.name.value)) {
                    errors.push(utils_1.errorWithCode(`ROOT_${node.name.value}_USED`, utils_1.logServiceAndType(serviceName, node.name.value) +
                        `Found invalid use of default root operation type extension \`${node.name.value}\`. Default root operation type names (${defaultRootOperationNames.join(', ')}) are disallowed when a schema is defined or extended within a service.`));
                }
            },
        });
    }
    return errors;
};
//# sourceMappingURL=rootFieldUsed.js.map