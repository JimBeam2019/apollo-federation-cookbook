import 'apollo-server-env';
import { ObjectTypeDefinitionNode, FieldDefinitionNode, StringValueNode, NameNode, DocumentNode, ObjectTypeExtensionNode, DirectiveNode, GraphQLNamedType, GraphQLError, GraphQLSchema, GraphQLObjectType, GraphQLField } from 'graphql';
import Maybe from 'graphql/tsutils/Maybe';
import { ExternalFieldDefinition } from './types';
export declare function isStringValueNode(node: any): node is StringValueNode;
export declare function isNotNullOrUndefined<T>(value: T | null | undefined): value is T;
export declare function mapFieldNamesToServiceName<Node extends {
    name: NameNode;
}>(fields: ReadonlyArray<Node>, serviceName: string): any;
export declare function findDirectivesOnTypeOrField(node: Maybe<ObjectTypeDefinitionNode | ObjectTypeExtensionNode | FieldDefinitionNode>, directiveName: string): DirectiveNode[];
export declare function stripExternalFieldsFromTypeDefs(typeDefs: DocumentNode, serviceName: string): {
    typeDefsWithoutExternalFields: DocumentNode;
    strippedFields: ExternalFieldDefinition[];
};
export declare function parseSelections(source: string): readonly import("graphql").SelectionNode[];
export declare function hasMatchingFieldInDirectives({ directives, fieldNameToMatch, namedType, }: {
    directives: DirectiveNode[];
    fieldNameToMatch: String;
    namedType: GraphQLNamedType;
}): boolean;
export declare const logServiceAndType: (serviceName: string, typeName: string, fieldName?: string | undefined) => string;
export declare function errorWithCode(code: string, message: string): GraphQLError;
export declare function findTypesContainingFieldWithReturnType(schema: GraphQLSchema, node: GraphQLField<any, any>): GraphQLObjectType[];
//# sourceMappingURL=utils.d.ts.map